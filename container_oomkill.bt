#!/usr/bin/env bpftrace
/*
 * container_oomkill    Trace OOM killer in containers.
 *        For Linux, uses bpftrace and eBPF.
 *
 * This traces the kernel out-of-memory killer by using kernel dynamic tracing of oom_kill_process().
 * Prints the process host pid, container id, cgroup path, command and a few other stats.
 * Note: There's no guarantee that the OOM killed process is within a "container", this script just assumes it is.
 *
 * Example of usage:
 *
 * # ./container_oomkill.bt
 * Tracing oom_kill_process()... Ctrl-C to end.
 * 2025-06-05 09:30:09,360 probe="kprobe:oom_kill_process" host_pid="72580" container_id="b7f59b0d6637" cgroup_path="unified:/docker/b7f59b0d6637c8f96e8c6e2d18f0fbe00eff3fb5c51c454540077eff2bf1e345,cgroup:/docker/b7f59b0d6637c8f96e8c6e2d18f0fbe00eff3fb5c51c454540077eff2bf1e345" command="python3" oc_totalpages="32768" oc_chosen_points="33927" memcg_memory_usage_pages="32768" memcg_memory_max_pages="32768" memcg_memory_low_pages="16384" memcg_swap_current_pages="0" memcg_swap_max_pages="0" memcg_swappiness="60" mm_rss_filepages="1324" mm_rss_anonpages="32496" mm_rss_swapents="0" mm_rss_shmempages="0" mm_pgtables_bytes="438272" mm_task_size="0" mm_hiwater_rss="2525" mm_hiwater_vm="3688" mm_total_vm="35415" mm_locked_vm="0" mm_pinned_vm="0" mm_data_vm="33546" mm_exec_vm="1615" mm_stack_vm="33" proc_oom_score_adj="0" proc_num_threads="1" proc_min_flt="31150" proc_maj_flt="0" proc_flags="4194560" proc_prio="120" proc_static_prio="120" proc_utime="22000000" proc_stime="70000000" proc_gtime="0" proc_start_time_ns="247809172406382" proc_start_boottime_ns="247809172406465" uptime_ms="3187"
 *
 * Adapted from the original bpftrace's tools/oomkill.bt by Brendan Gregg:
 * -> https://github.com/bpftrace/bpftrace/blob/master/tools/oomkill.bt
 */

#ifndef BPFTRACE_HAVE_BTF
#include <linux/oom.h>
#endif

BEGIN
{
	printf("Tracing oom_kill_process()... Hit Ctrl-C to end.\n");
}

// fn: static void oom_kill_process(struct oom_control *oc, const char *message)
// https://sourcegraph.com/github.com/torvalds/linux/-/blob/mm/oom_kill.c?L1017
kprobe:oom_kill_process
{
	$oc = (struct oom_control *)arg0;
	$message = str(arg1);

	// print datetime with milliseconds precision
	printf("%s", strftime("%Y-%m-%d %H:%M:%S", nsecs));
	printf(",%03d", (nsecs % 1000000000) / 1000000);

	// print labels
	printf(" probe=\"kprobe:oom_kill_process\" message=\"%s\" host_pid=\"%d\" container_id=\"%s\" cgroup_path=\"%s\" command=\"%s\"",
		$message,
		$oc->chosen->pid,
		$oc->chosen->nsproxy->uts_ns->name.nodename,
		cgroup_path(cgroup),
		$oc->chosen->comm);

	// oom_control stats
	printf(" oc_totalpages=\"%d\" oc_chosen_points=\"%d\"",
		$oc->totalpages,        // = mem + swap
		$oc->chosen_points);    // = (filepages + anonpages + swapents + shmempages) + pgtables_bytes / PAGE_SIZE + oom_score_adj * totalpages / 1000

	// cgroup stats
	printf(" memcg_memory_usage_pages=\"%d\" memcg_memory_max_pages=\"%d\" memcg_memory_low_pages=\"%d\"",
		$oc->memcg->memory.usage.counter,   // memory usage in pages
		$oc->memcg->memory.max,             // resource hard limit
		$oc->memcg->memory.low);            // resource request
	printf(" memcg_swap_current_pages=\"%d\" memcg_swap_max_pages=\"%d\" memcg_swappiness=\"%d\"",
		$oc->memcg->swap.usage.counter,     // swap usage in pages
		$oc->memcg->swap.max,               // swap hard limit
		$oc->memcg->swappiness);

	// process mm stats
	printf(" mm_rss_filepages=\"%d\" mm_rss_anonpages=\"%d\" mm_rss_swapents=\"%d\" mm_rss_shmempages=\"%d\"",
		$oc->chosen->mm->rss_stat.count[0].counter,
		$oc->chosen->mm->rss_stat.count[1].counter,
		$oc->chosen->mm->rss_stat.count[2].counter,
		$oc->chosen->mm->rss_stat.count[3].counter);
	printf(" mm_pgtables_bytes=\"%d\"",
		$oc->chosen->mm->pgtables_bytes.counter);
	// other mm stats
	printf(" mm_task_size=\"%d\" mm_hiwater_rss=\"%d\" mm_hiwater_vm=\"%d\" mm_total_vm=\"%d\" mm_locked_vm=\"%d\" mm_pinned_vm=\"%d\" mm_data_vm=\"%d\" mm_exec_vm=\"%d\" mm_stack_vm=\"%d\"",
		$oc->chosen->mm->task_size,
		$oc->chosen->mm->hiwater_rss,
		$oc->chosen->mm->hiwater_vm,
		$oc->chosen->mm->total_vm,
		$oc->chosen->mm->locked_vm,
		$oc->chosen->mm->pinned_vm.counter,
		$oc->chosen->mm->data_vm,
		$oc->chosen->mm->exec_vm,
		$oc->chosen->mm->stack_vm);

	// other process stats
	printf(" proc_oom_score_adj=\"%d\" proc_num_threads=\"%d\" proc_min_flt=\"%d\" proc_maj_flt=\"%d\" proc_flags=\"%d\" proc_prio=\"%d\" proc_static_prio=\"%d\" proc_utime=\"%lld\" proc_stime=\"%lld\" proc_gtime=\"%lld\" proc_start_time_ns=\"%lld\" proc_start_boottime_ns=\"%lld\"",
		$oc->chosen->signal->oom_score_adj, // score adj used in oom_badness calculation
		$oc->chosen->signal->nr_threads,    // number of threads in the process
		$oc->chosen->min_flt,               // minor page faults
		$oc->chosen->maj_flt,               // major page faults
		$oc->chosen->flags,                 // process flags
		$oc->chosen->prio,                  // process priority
		$oc->chosen->static_prio,           // process static priority
		$oc->chosen->utime,                 // CPU user time in clock ticks
		$oc->chosen->stime,                 // CPU system time in clock ticks
		$oc->chosen->gtime,                 // CPU guest time in clock ticks
		$oc->chosen->start_time,            // start time in ns
		$oc->chosen->start_boottime);       // start time since boot time in ns

	// calculated stats
	printf(" uptime_ms=\"%lld\"",
		(nsecs - $oc->chosen->start_time) / 1000000);

	printf("\n");
}